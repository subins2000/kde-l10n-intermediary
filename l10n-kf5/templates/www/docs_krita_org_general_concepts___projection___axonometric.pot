# SOME DESCRIPTIVE TITLE.
# Copyright (C) licensed under the GNU Free Documentation License 1.3+ unless stated otherwise
# This file is distributed under the same license as the Krita Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Krita Manual 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-02 03:06+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection-cube_07.svg"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection-cube_08.svg"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection-cube_09.svg"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection-cube_10.svg"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection-cube_11.svg"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_15.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_16.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_17.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_18.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_19.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_20.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_21.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_22.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_23.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_24.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_25.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_26.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_27.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_28.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_29.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_animation_02.gif"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:None
msgid ".. image:: images/category_projection/projection_image_30.png"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:1
msgid "Axonometric projection."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:10
msgid "This is a continuation of :ref:`the orthographic and oblique tutorial <projection_orthographic>`, be sure to check it out if you get confused!"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:12
#: ../../general_concepts/projection/axonometric.rst:16
msgid "Axonometric"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:12
msgid "Projection"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:12
msgid "Dimetric"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:12
msgid "Isometric"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:18
msgid "So, the logic of adding the top is still similar to that of the side."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:23
msgid "Not very interesting. But it gets much more interesting when we use a side projection:"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:28
msgid "Because our cube is red on both front-sides, and blue on both left and right side, we can just use copies, this simplifies the method for cubes a lot. We call this form of axonometric projection 'dimetric' as it deforms two parallel lines equally."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:30
msgid "Isometric is sorta like dimetric where we have the same angle between all main lines:"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:35
msgid "True isometric is done with a 90-54.736=35.264° angle from ground plane:"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:40
msgid "(as you can see, it doesn't line up perfectly, because Inkscape, while more designed for making these kinds of diagrams than Krita, doesn't have tools to manipulate the line's angle in degrees)"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:42
msgid "This is a bit of an awkward angle, and on top of that, it doesn't line up with pixels sensibly, so for videogames an angle of 30° from the ground plane is used."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:47
msgid "Alright, so, let's make an isometric out of our boy then."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:49
msgid "We make a new document, and add a vector layer."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:51
msgid "On the vector layer, we select the straight line tool, start a line and then hold the :kbd:`Shift` key to make it snap to angles. This'll allow us to make a 30° setup like above:"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:56
msgid "We then import some of the frames from the animation via :menuselection:`Layers --> Import/Export --> Import layer`."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:58
msgid "Then crop it by setting the crop tool to :guilabel:`Layer`, and use :menuselection:`Filters --> Colors --> Color to alpha` to remove any background. I also set the layers to 50% opacity. We then align the vectors to them:"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:65
msgid "To resize a vector but keep its angle, you just select it with the shape handling tool (the white arrow) drag on the corners of the bounding box to start moving them, and then press the :kbd:`Shift` key to constrain the ratio. This'll allow you to keep the angle."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:67
msgid "The lower image is 'the back seen from the front', we'll be using this to determine where the ear should go."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:69
msgid "Now, we obviously have too little space, so select the crop tool, select :guilabel:`Image` and tick :guilabel:`Grow` and do the following:"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:74
msgid "Grow is a more practical way of resizing the canvas in width and height immediately."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:76
msgid "Then we align the other heads and transform them by using the transform tool options:"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:81
msgid "(330° here is 360°-30°)"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:83
msgid "Our rectangle we'll be working in slowly becomes visible. Now, this is a bit of a difficult angle to work at, so we go to :menuselection:`Image --> Rotate --> Rotate Image` and fill in 30° clockwise:"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:90
msgid "(of course, we could've just rotated the left two images 30°, this is mostly to be less confusing compared to the cube)"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:92
msgid "So, we do some cropping, some cleanup and add two parallel assistants like we did with the orthographic:"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:97
msgid "So the idea here is that you draw parallel lines from both sides to find points in the drawing area. You can use the previews of the assistants for this to keep things clean, but I drew the lines anyway for your convenience."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:102
msgid "The best is to make a few sampling points, like with the eyebrows here, and then draw the eyebrow over it."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:108
msgid "Alternative axonometric with the transform tool"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:110
msgid "Now, there's an alternative way of getting there that doesn't require as much space."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:112
msgid "We open our orthographic with :guilabel:`Open existing Document as Untitled Document` so that we don't save over it."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:114
msgid "Our game-safe isometric has its angle at two pixels horizontal is one pixel vertical. So, we shear the ortho graphics with transform masks to -.5/+.5 pixels (this is proportional)"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:119
msgid "Use the grid to setup two parallel rulers that represent both diagonals (you can snap them with the :kbd:`Shift + S` shortcut):"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:124
msgid "Add the top view as well:"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:129
msgid "if you do this for all slices, you get something like this:"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:134
msgid "Using the parallel rulers, you can then figure out the position of a point in 3d-ish space:"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:139
msgid "As you can see, this version both looks more 3d as well as more creepy."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:141
msgid "That's because there are less steps involved as the previous version -- We're deriving our image directly from the orthographic view -- so there are less errors involved."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:143
msgid "The creepiness is because we've had the tiniest bit of stylisation in our side view, so the eyes come out HUGE. This is because when we stylize the side view of an eye, we tend to draw it not perfectly from the side, but rather slightly at an angle. If you look carefully at the turntable, the same problem crops up there as well."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:145
msgid "Generally, stylized stuff tends to fall apart in 3d view, and you might need to make some choices on how to make it work."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:147
msgid "For example, we can just easily fix the side view (because we used transform masks, this is easy.)"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:152
msgid "And then generate a new drawing from that…"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:157
msgid "Compare to the old one and you should be able to see that the new result’s eyes are much less creepy:"
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:162
msgid "It still feels very squashed compared to the regular parallel projection above, and it might be an idea to not just skew but also stretch the orthos a bit."
msgstr ""

#: ../../general_concepts/projection/axonometric.rst:164
msgid "Let's continue with perspective projection in the next one!"
msgstr ""
